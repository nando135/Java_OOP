/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javanexuspots.admin.salesDb;

import java.util.Date;
import java.util.List;
import javanexuspots.admin.AdminMainPage;
import javanexuspots.models.Item;
import javanexuspots.models.SalesEntry;
import javanexuspots.services.ItemService;
import javanexuspots.services.SalesEntryService;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Asus ROG
 */
public class AdminEditSales extends javax.swing.JFrame {

    private SalesEntryService salesEntryService; 
    private ItemService itemService;

    // A local field to store the currently selected sales entry
    private SalesEntry currentSalesEntry;
    
    public AdminEditSales() {
        this.salesEntryService = new SalesEntryService();
        this.itemService = new ItemService();
        initComponents();
        loadSalesIdCmbBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        EditSalesBtn = new javax.swing.JButton();
        CancelBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        qtySoldTxtField = new javax.swing.JTextField();
        salesIdCmbBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        ItemIdCmbBox = new javax.swing.JComboBox<>();
        saleDatePicker = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Edit Existing Sales Entry");

        EditSalesBtn.setBackground(new java.awt.Color(51, 102, 255));
        EditSalesBtn.setForeground(new java.awt.Color(255, 255, 255));
        EditSalesBtn.setText("Edit Existing Sales Entry");
        EditSalesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditSalesBtnActionPerformed(evt);
            }
        });

        CancelBtn.setBackground(new java.awt.Color(153, 153, 153));
        CancelBtn.setForeground(new java.awt.Color(0, 0, 0));
        CancelBtn.setText("Cancel");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Item ID:");

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Date of Sale:");

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Quantity Sold:");

        qtySoldTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtySoldTxtFieldActionPerformed(evt);
            }
        });

        salesIdCmbBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesIdCmbBoxActionPerformed(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("SalesEntry ID:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ItemIdCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salesIdCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(qtySoldTxtField)
                            .addComponent(saleDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                        .addGap(19, 19, 19))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(CancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EditSalesBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(saleDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qtySoldTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(salesIdCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(ItemIdCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(74, 74, 74)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditSalesBtn)
                    .addComponent(CancelBtn))
                .addGap(72, 72, 72))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EditSalesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditSalesBtnActionPerformed
        // validate user input
        if (currentSalesEntry == null) {
            JOptionPane.showMessageDialog(this, "Please select a sales entry to edit.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String selectedItemId = (String) ItemIdCmbBox.getSelectedItem();
        if (selectedItemId == null || selectedItemId.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a valid Item ID.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String quantityText = qtySoldTxtField.getText().trim();
        if (quantityText.isEmpty() || !quantityText.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid quantity (numeric).", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int newQuantity = Integer.parseInt(quantityText);

        Date saleDate = saleDatePicker.getDate();
        if (saleDate == null) {
            JOptionPane.showMessageDialog(this, "Please select a valid sale date.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            SalesEntry originalEntry = salesEntryService.getSalesEntryById(currentSalesEntry.getEntryId());

            // adjust the inventory: if the item changed or quantity changed, we need to revert the old quantity and apply the new one
            if (!originalEntry.getItemId().equals(selectedItemId) || originalEntry.getQuantitySold() != newQuantity) {
                Item oldItem = itemService.getItemById(originalEntry.getItemId());
                if (oldItem != null) {
                    oldItem.setStockLevel(oldItem.getStockLevel() + originalEntry.getQuantitySold());
                    itemService.updateItem(oldItem);
                }

                // deduct the new quantity from the new selected item
                Item newItem = itemService.getItemById(selectedItemId);
                if (newItem == null) {
                    JOptionPane.showMessageDialog(this, "Selected item not found in inventory.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (newItem.getStockLevel() < newQuantity) {
                    JOptionPane.showMessageDialog(this, "Not enough stock for the selected item.", "Stock Error", JOptionPane.ERROR_MESSAGE);
                    if (oldItem != null) {
                        oldItem.setStockLevel(oldItem.getStockLevel() - originalEntry.getQuantitySold());
                        itemService.updateItem(oldItem);
                    }
                    return;
                }

                // calculate the new sold quantity from the new item
                newItem.setStockLevel(newItem.getStockLevel() - newQuantity);
                itemService.updateItem(newItem);
            }

            // update the sales entry
            originalEntry.setItemId(selectedItemId);
            originalEntry.setQuantitySold(newQuantity);
            originalEntry.setSalesDate(saleDate);

            salesEntryService.updateSalesEntry(originalEntry);

            JOptionPane.showMessageDialog(this, "Sales entry updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            // Optionally, you could refresh the combo box or close the form
            loadSalesIdCmbBox();
            currentSalesEntry = null;
            clearFields();
            new AdminMainPage().setVisible(true);
            this.dispose();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error occurred while editing the entry: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_EditSalesBtnActionPerformed

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        new AdminMainPage().setVisible(true);;
        this.dispose();
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void qtySoldTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtySoldTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtySoldTxtFieldActionPerformed

    private void salesIdCmbBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesIdCmbBoxActionPerformed
        String selectedSalesId = (String) salesIdCmbBox.getSelectedItem();
        if (selectedSalesId != null && !selectedSalesId.trim().isEmpty()) {
            try {
                SalesEntry entry = salesEntryService.getSalesEntryById(selectedSalesId);
                if (entry != null) {
                    currentSalesEntry = entry;
                    populateFields(entry);
                } else {
                    clearFields();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error loading sales entry: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_salesIdCmbBoxActionPerformed

    private void loadSalesIdCmbBox() {
        try {
            // get all sales entries
            List<SalesEntry> salesEntries = salesEntryService.getAllSalesEntries();

            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

            // populate the combo box with sales entry IDs
            for (SalesEntry entry : salesEntries) {
                model.addElement(entry.getEntryId());
            }

            // set the model to the combo box
            salesIdCmbBox.setModel(model);

            // clear fields
            clearFields();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading sales entry IDs: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void populateFields(SalesEntry entry) {
        // set Item ID combo box
        try {
            // load all items to ensure the item ID combo box is filled
            List<Item> items = itemService.getAllItems();
            DefaultComboBoxModel<String> itemModel = new DefaultComboBoxModel<>();
            for (Item item : items) {
                itemModel.addElement(item.getItemId());
            }
            ItemIdCmbBox.setModel(itemModel);

            // select the current item's ID
            ItemIdCmbBox.setSelectedItem(entry.getItemId());

            // set quantity and date
            qtySoldTxtField.setText(String.valueOf(entry.getQuantitySold()));
            saleDatePicker.setDate(entry.getSalesDate());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading item details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        ItemIdCmbBox.setModel(new DefaultComboBoxModel<>());
        qtySoldTxtField.setText("");
        saleDatePicker.setDate(null);
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminEditSales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminEditSales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminEditSales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminEditSales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminEditSales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelBtn;
    private javax.swing.JButton EditSalesBtn;
    private javax.swing.JComboBox<String> ItemIdCmbBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField qtySoldTxtField;
    private com.toedter.calendar.JDateChooser saleDatePicker;
    private javax.swing.JComboBox<String> salesIdCmbBox;
    // End of variables declaration//GEN-END:variables
}
