/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javanexuspots.purchaseManager;

import javanexuspots.models.Item;
import javanexuspots.models.PurchaseOrder;
import javanexuspots.services.ItemService;
import javanexuspots.services.PurchaseOrderService;
import javanexuspots.services.RequisitionService;
import java.text.SimpleDateFormat;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import java.util.List;
import javanexuspots.models.Requisition;

/**
 *
 * @author chris
 */
public class PurchaseOrderPage extends javax.swing.JFrame {
    
    private final PurchaseOrderService purchaseOrderService;
    private final RequisitionService requisitionService;
    private final ItemService itemService;
    private final DefaultTableModel tableModel;


    public PurchaseOrderPage() {
        purchaseOrderService = new PurchaseOrderService();
        requisitionService = new RequisitionService();
        itemService = new ItemService();
        
        
        initComponents();
        
        
        tableModel = (DefaultTableModel) order_table.getModel();
        loadRequisitionIDs();
        loadPurchaseOrderData();
        loadApprovedRequisitions();
        
        order_table.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                req_tableMouseClicked(evt);
            }
        });
    }
    
    private void loadPurchaseOrderData() {
        tableModel.setRowCount(0);
        List<PurchaseOrder> orders = purchaseOrderService.getAllPurchaseOrders();
        for (PurchaseOrder order : orders) {
            tableModel.addRow(new Object[]{
                order.getPurchaseOrderID(),
                order.getPurchaseRequisitionID(),
                order.getItemID(),
                order.getQuantity(),
                order.getReorderLevel(),
                order.getStatus(),
                order.getDate()
            });
        }
    }
    
    private void loadRequisitionIDs() {
        cmbReq.removeAllItems();
        List<Requisition> requisitions = requisitionService.getAllRequisitions();
        for (Requisition req : requisitions) {
            cmbReq.addItem(req.getRequisitionId());
        }
    }

    private void req_tableMouseClicked(java.awt.event.MouseEvent evt) {
        int selectedRow = order_table.getSelectedRow();
        if (selectedRow != -1) {
            try {
                Object dateValue = order_table.getValueAt(selectedRow, 6);
                Date requiredByDate = null;
                
                if (dateValue instanceof Date) {
                    requiredByDate = (Date) dateValue;
                }

                else if (dateValue instanceof Long) {
                    requiredByDate = new Date((Long) dateValue);
                }

                else if (dateValue instanceof String) {
                    String dateString = dateValue.toString();
                    String[] dateFormats = {
                        "yyyy-MM-dd",       
                        "MM/dd/yyyy",       
                        "dd/MM/yyyy",       
                        "EEE MMM dd HH:mm:ss zzz yyyy" 
                    };

                    for (String format : dateFormats) {
                        try {
                            SimpleDateFormat sdf = new SimpleDateFormat(format);
                            requiredByDate = sdf.parse(dateString);
                            break; 
                        } catch (Exception ignored) {
                            
                        }
                    }
                }

                
                if (requiredByDate != null) {
                    jDateChooser1.setDate(requiredByDate);
                } else {
                    JOptionPane.showMessageDialog(this, "Unable to parse date with available formats.");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error setting date in jDateChooser: " + ex.getMessage());
            }
        }
    }

    private void loadApprovedRequisitions() {
        cmbReq.removeAllItems();
        List<Requisition> allRequisitions = requisitionService.getAllRequisitions();

        for (Requisition req : allRequisitions) {
            if ("approved".equalsIgnoreCase(req.getStatus())) {
                cmbReq.addItem(req.getRequisitionId());
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        order_table = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cmbReq = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        order_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Purchase ID", "Requisition ID", "Item ID", "Quantity", "Reorder Level", "Status", "Date"
            }
        ));
        jScrollPane2.setViewportView(order_table);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel6.setText("Date");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setText("Requisition ID");

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel4.setText("Purchase Order");

        cmbReq.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbReqActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(396, 396, 396)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbReq, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel4)
                .addGap(24, 24, 24)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(cmbReq, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbReqActionPerformed
        String requisitionID = (String) cmbReq.getSelectedItem();
        if (requisitionID != null) {
            Requisition req = requisitionService.getRequisitionById(requisitionID);
            if (req != null) {
                String itemID = req.getItemId();
                int quantity = req.getQuantity();

                Item item = itemService.getItemById(itemID);
                int reorderLevel = (item != null) ? item.getReorderLevel() : 0;

                System.out.println("Item ID: " + itemID);
                System.out.println("Quantity: " + quantity);
                System.out.println("Reorder Level: " + reorderLevel);
            }
        }
    }//GEN-LAST:event_cmbReqActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = order_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }

        try {
            int purchaseOrderID = Integer.parseInt(order_table.getValueAt(selectedRow, 0).toString());
            String requisitionID = (String) cmbReq.getSelectedItem();
            Date date = jDateChooser1.getDate();

            if (requisitionID == null || date == null) {
                JOptionPane.showMessageDialog(this, "Please select a Requisition ID and Date.");
                return;
            }

            Requisition req = requisitionService.getRequisitionById(requisitionID);
            String itemID = req.getItemId();
            int quantity = req.getQuantity();

            Item item = itemService.getItemById(itemID);
            int reorderLevel = (item != null) ? item.getReorderLevel() : 0;

            PurchaseOrder updatedOrder = new PurchaseOrder(purchaseOrderID, requisitionID, itemID, quantity, reorderLevel, "Pending",  date);
            purchaseOrderService.updatePurchaseOrder(updatedOrder);

            JOptionPane.showMessageDialog(this, "Purchase Order Updated Successfully!");
            loadPurchaseOrderData();
            jDateChooser1.setDate(null);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            int purchaseOrderID = purchaseOrderService.generateNextPurchaseOrderId();
            String requisitionID = (String) cmbReq.getSelectedItem();
            Date date = jDateChooser1.getDate();

            if (requisitionID == null || date == null) {
                JOptionPane.showMessageDialog(this, "Please select a Requisition ID and Date.");
                return;
            }

            Requisition req = requisitionService.getRequisitionById(requisitionID);
            if (req == null) {
                JOptionPane.showMessageDialog(this, "Requisition not found.");
                return;
            }

            String itemID = req.getItemId();
            int quantity = req.getQuantity();

            Item item = itemService.getItemById(itemID);
            int reorderLevel = (item != null) ? item.getReorderLevel() : 0;

            PurchaseOrder order = new PurchaseOrder(
                purchaseOrderID,
                requisitionID,
                itemID,
                quantity,
                reorderLevel,
                "Approved",
                date
            );

            purchaseOrderService.addPurchaseOrder(order);
            JOptionPane.showMessageDialog(this, "Purchase Order Added Successfully!");
            loadPurchaseOrderData();
            jDateChooser1.setDate(null);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = order_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        try {
            int purchaseOrderID = Integer.parseInt(order_table.getValueAt(selectedRow, 0).toString());
            purchaseOrderService.deletePurchaseOrder(purchaseOrderID);
            JOptionPane.showMessageDialog(this, "Purchase Order Deleted Successfully!");
            loadPurchaseOrderData();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        Main_menu_PM menu = new Main_menu_PM(); 
        menu.setVisible(true); 
    this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchaseOrderPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbReq;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable order_table;
    // End of variables declaration//GEN-END:variables
}
