/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javanexuspots.salesManager;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javanexuspots.models.Requisition;
import javanexuspots.services.RequisitionService;
import javanexuspots.loginPage.LoginSession;
/**
 *
 * @author fernandosalim
 */
public class purchaserequisition2 extends javax.swing.JFrame {
 private final LoginSession loginSession; // Use LoginSession
    private final RequisitionService requisitionService;
    /**
     * Creates new form purchaserequisition2
     */
     public purchaserequisition2(LoginSession loginSession) {
 this.loginSession = loginSession; 
        this.requisitionService = new RequisitionService();
        initComponents();
        loadRequisitionData(); // Load requisition data into the table
    }
    private void loadRequisitionData() {
          List<Requisition> requisitions = requisitionService.loadData(); // Load data from the service
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows
        jComboBox1.removeAllItems(); 

        for (Requisition req : requisitions) {
            model.addRow(new Object[]{
                req.getRequisitionId(),
                req.getItemId(),
                req.getQuantity(),
                req.getRequiredByDate(),
                req.getManagerId(),
                req.getSupplierId(),
                req.getStatus()
            });
            jComboBox1.addItem(req.getItemId());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "requisitionID", "itemId", "quantity", "requiredByDate", "managerId", "SupplierId", "status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Back to main page ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add requisition");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Quantity Update");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Delete Row");

        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField1.setText("enter quantity");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton3))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton4)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    new salesmanager().setVisible(true); // Open the salesmanager window
    this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       new purchaserequisition(loginSession).setVisible(true);
       this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
   String selectedItemId = (String) jComboBox1.getSelectedItem(); // Get selected item ID from ComboBox
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

    if (selectedItemId != null) {
        // Loop through the table to find the matching row
        for (int i = 0; i < model.getRowCount(); i++) {
            String itemId = model.getValueAt(i, 1).toString(); // Column index 1: itemId
            if (itemId.equals(selectedItemId)) {
                // Select the corresponding row in the table
                jTable1.setRowSelectionInterval(i, i);
                jTable1.scrollRectToVisible(jTable1.getCellRect(i, 0, true)); // Scroll to the selected row
                break;
            }
        }
    }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
String selectedItemId = (String) jComboBox1.getSelectedItem();

    if (selectedItemId == null) {
        JOptionPane.showMessageDialog(this, 
            "Please select an Item ID from the dropdown.", 
            "No Selection", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Get the quantity input from the text field
    String quantityText = jTextField1.getText().trim();

    if (quantityText.isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "Quantity field cannot be empty.", 
            "Input Error", 
            JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int updatedQuantity = Integer.parseInt(quantityText);
        if (updatedQuantity <= 0) {
            JOptionPane.showMessageDialog(this, 
                "Quantity must be greater than zero.", 
                "Invalid Quantity", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Find the row with the matching itemId in the table
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        boolean itemFound = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            String tableItemId = model.getValueAt(i, 1).toString();
            if (tableItemId.equals(selectedItemId)) {
                // Update the quantity in the table
                String requisitionId = model.getValueAt(i, 0).toString();
                Requisition updatedRequisition = requisitionService.getRequisitionById(requisitionId);

                if (updatedRequisition != null) {
                    updatedRequisition.setQuantity(updatedQuantity);
                    requisitionService.updateRequisition(updatedRequisition);

                    // Update the table
                    model.setValueAt(updatedQuantity, i, 2); // Column 2 is quantity
                    JOptionPane.showMessageDialog(this, 
                        "Requisition updated successfully.", 
                        "Success", 
                        JOptionPane.INFORMATION_MESSAGE);
                    itemFound = true;
                }
                break;
            }
        }

        if (!itemFound) {
            JOptionPane.showMessageDialog(this, 
                "Item ID not found in the table.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, 
            "Invalid quantity format. Please enter a valid number.", 
            "Input Error", 
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
  String selectedItemId = (String) jComboBox1.getSelectedItem();

    if (selectedItemId == null) {
        JOptionPane.showMessageDialog(this, 
            "Please select an Item ID from the dropdown.", 
            "No Selection", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    int confirmation = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to delete the requisition for Item ID: " + selectedItemId + "?", 
        "Confirm Delete", 
        JOptionPane.YES_NO_OPTION);

    if (confirmation == JOptionPane.YES_OPTION) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        boolean itemFound = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            String tableItemId = model.getValueAt(i, 1).toString();
            if (tableItemId.equals(selectedItemId)) {
                String requisitionId = model.getValueAt(i, 0).toString();

                try {
                    requisitionService.deleteRequisition(requisitionId);
                    model.removeRow(i); // Remove the row from the table
                    JOptionPane.showMessageDialog(this, 
                        "Requisition for Item ID: " + selectedItemId + " deleted successfully.", 
                        "Success", 
                        JOptionPane.INFORMATION_MESSAGE);
                    itemFound = true;
                } catch (IllegalArgumentException e) {
                    JOptionPane.showMessageDialog(this, 
                        e.getMessage(), 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
                }
                break;
            }
        }

        if (!itemFound) {
            JOptionPane.showMessageDialog(this, 
                "Item ID not found in the table.", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(purchaserequisition2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(purchaserequisition2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(purchaserequisition2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(purchaserequisition2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
  LoginSession loginSession = new LoginSession();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new purchaserequisition2(loginSession).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
