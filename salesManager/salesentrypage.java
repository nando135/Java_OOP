package javanexuspots.salesManager;

import javanexuspots.models.Item;
import javanexuspots.models.SalesEntry;
import javanexuspots.services.ItemService;
import javanexuspots.services.SalesEntryService;
import javanexuspots.loginPage.LoginSession;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author fernandosalim
 */
public class salesentrypage extends javax.swing.JFrame {
   private SalesEntryService salesEntryService;
    private ItemService itemService;
    private LoginSession loginSession;
    /**
     * Creates new form salesentrypage
     */
    public salesentrypage(LoginSession loginSession) {
       this.loginSession = loginSession;
        this.salesEntryService = new SalesEntryService();
        this.itemService = new ItemService();
        initComponents();
        loadInventoryItemsToComboBox();
        loadSalesEntriesToTable();
    }
    private void loadInventoryItemsToComboBox() {
        jComboBox1.removeAllItems();
        List<Item> items = itemService.getAllItems();

        for (Item item : items) {
            jComboBox1.addItem(item.getItemId());
        }
    }

private void loadSalesEntriesToTable() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear table rows
    List<SalesEntry> entries = salesEntryService.getAllSalesEntries();
    for (SalesEntry entry : entries) {
        model.addRow(new Object[]{
            entry.getEntryId(),
            entry.getItemId(),
            new java.text.SimpleDateFormat("yyyy-MM-dd").format(entry.getSalesDate()),
            entry.getQuantitySold()
        });
    }
    loadSalesEntriesToComboBox2();
}
private void loadSalesEntriesToComboBox2() {
    jComboBox2.removeAllItems(); // Clear existing items in ComboBox2

    // Fetch all sales entries from the service
    List<SalesEntry> salesEntries = salesEntryService.getAllSalesEntries();

    // Add each 'itemId' to ComboBox2
    for (SalesEntry entry : salesEntries) {
        jComboBox2.addItem(entry.getItemId());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "entryId", "itemId", "Date", "sold quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Item (Add) :");

        jLabel2.setText("Date :");

        jTextField1.setText("jTextField1");

        jLabel3.setText("Sold Quantity :");

        jTextField2.setText("jTextField2");

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText("Item (Delete) :");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jButton4)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4))))
                .addGap(0, 20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     String selectedItemId = (String) jComboBox1.getSelectedItem();
    String dateText = jTextField1.getText().trim();
    String quantityText = jTextField2.getText().trim();

    // Input validation
    if (selectedItemId == null || dateText.isEmpty() || quantityText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int soldQuantity = Integer.parseInt(quantityText);
        if (soldQuantity <= 0) {
            JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Parse the date in yyyy-MM-dd format
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);
        Date salesDate = dateFormat.parse(dateText);

        // Load inventory
        List<Item> items = itemService.getAllItems();
        boolean itemFound = false;

        for (Item item : items) {
            if (item.getItemId().equals(selectedItemId)) {
                itemFound = true;

                // Check stock availability
                if (item.getStockLevel() < soldQuantity) {
                    JOptionPane.showMessageDialog(this, "Insufficient stock. Available: " + item.getStockLevel(), "Stock Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Deduct stock
                item.setStockLevel(item.getStockLevel() - soldQuantity);
                itemService.updateItem(item);
                break;
            }
        }

        if (!itemFound) {
            JOptionPane.showMessageDialog(this, "Item not found in inventory.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Add the sales entry
        String newEntryId = salesEntryService.generateNextEntryId();
        SalesEntry newEntry = new SalesEntry(newEntryId, selectedItemId, salesDate, soldQuantity);
        salesEntryService.addSalesEntry(newEntry);

        // Provide feedback and reload table
        JOptionPane.showMessageDialog(this, "Sales entry added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        loadSalesEntriesToTable();

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid quantity format. Please enter a valid number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Invalid date format. Use yyyy-MM-dd.", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String selectedItemId = (String) jComboBox1.getSelectedItem(); // Selected item ID
    String dateText = jTextField1.getText().trim();               // Date field input
    String quantityText = jTextField2.getText().trim();           // Quantity field input

    // Input validation
    if (selectedItemId == null || dateText.isEmpty() || quantityText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int newSoldQuantity = Integer.parseInt(quantityText);
        if (newSoldQuantity <= 0) {
            JOptionPane.showMessageDialog(this, "Sold quantity must be greater than 0.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Parse the date
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);
        Date newSalesDate = dateFormat.parse(dateText);

        // Load sales entries
        List<SalesEntry> salesEntries = salesEntryService.getAllSalesEntries();
        SalesEntry existingEntry = null;
        boolean entryFound = false;

        for (SalesEntry entry : salesEntries) {
            if (entry.getItemId().equals(selectedItemId)) {
                existingEntry = entry;
                entryFound = true;
                break;
            }
        }

        if (!entryFound) {
            JOptionPane.showMessageDialog(this, "Sales entry not found for the selected item.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Load inventory and update stock
        List<Item> items = itemService.getAllItems();
        boolean itemFound = false;

        for (Item item : items) {
            if (item.getItemId().equals(selectedItemId)) {
                // Add back old sold quantity to stock
                item.setStockLevel(item.getStockLevel() + existingEntry.getQuantitySold());

                // Validate stock availability for the new quantity
                if (item.getStockLevel() < newSoldQuantity) {
                    JOptionPane.showMessageDialog(this, "Insufficient stock for the updated quantity.", "Stock Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Deduct new sold quantity
                item.setStockLevel(item.getStockLevel() - newSoldQuantity);
                itemService.updateItem(item);
                itemFound = true;
                break;
            }
        }

        if (!itemFound) {
            JOptionPane.showMessageDialog(this, "Item not found in inventory.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Delete old entry and add updated entry
        salesEntryService.deleteSalesEntry(existingEntry.getEntryId());
        String newEntryId = salesEntryService.generateNextEntryId();
        SalesEntry updatedEntry = new SalesEntry(newEntryId, selectedItemId, newSalesDate, newSoldQuantity);
        salesEntryService.addSalesEntry(updatedEntry);

        // Success feedback and reload
        JOptionPane.showMessageDialog(this, "Sales entry updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        loadSalesEntriesToTable();

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid sold quantity format.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Invalid date format. Use yyyy-MM-dd.", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String selectedItemId = (String) jComboBox2.getSelectedItem();

    // Input validation
    if (selectedItemId == null) {
        JOptionPane.showMessageDialog(this, "Please select an item to delete.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Load sales entries
        List<SalesEntry> salesEntries = salesEntryService.getAllSalesEntries();
        SalesEntry entryToDelete = null;
        boolean entryFound = false;

        for (SalesEntry entry : salesEntries) {
            if (entry.getItemId().equals(selectedItemId)) {
                entryToDelete = entry;
                entryFound = true;
                break;
            }
        }

        if (!entryFound) {
            JOptionPane.showMessageDialog(this, "Sales entry not found for the selected item.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Load inventory and update stock
        List<Item> items = itemService.getAllItems();
        boolean itemFound = false;

        for (Item item : items) {
            if (item.getItemId().equals(entryToDelete.getItemId())) {
                // Add back the sold quantity to stock
                item.setStockLevel(item.getStockLevel() + entryToDelete.getQuantitySold());
                itemService.updateItem(item);
                itemFound = true;
                break;
            }
        }

        if (!itemFound) {
            JOptionPane.showMessageDialog(this, "Item not found in inventory.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Delete the sales entry
        salesEntryService.deleteSalesEntry(entryToDelete.getEntryId());

        // Success feedback and reload
        JOptionPane.showMessageDialog(this, "Sales entry deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        loadSalesEntriesToTable();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error occurred while deleting the entry: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
          String selectedItemId = (String) jComboBox2.getSelectedItem(); // Get selected item ID
    
    if (selectedItemId != null) {
        JOptionPane.showMessageDialog(this, 
            "Selected Item ID: " + selectedItemId, 
            "Item Selected", 
            JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String selectedItemId = (String) jComboBox1.getSelectedItem();
    
    if (selectedItemId != null) {
        JOptionPane.showMessageDialog(this, 
            "Selected Item ID: " + selectedItemId, 
            "Item Selected", 
            JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new salesmanager().setVisible(true);
    this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(salesentrypage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(salesentrypage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(salesentrypage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(salesentrypage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
   LoginSession loginSession = new LoginSession();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new salesentrypage(loginSession).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
