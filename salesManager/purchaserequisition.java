package javanexuspots.salesManager;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author fernandosalim
 */
import javanexuspots.loginPage.LoginSession;
import javanexuspots.models.Item;
import javanexuspots.models.Requisition;
import javanexuspots.services.ItemService;
import javanexuspots.services.RequisitionService;
import java.text.SimpleDateFormat; 
import java.text.ParseException;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JOptionPane;
public class purchaserequisition extends javax.swing.JFrame {
    private final RequisitionService requisitionService;
   private final ItemService itemService;
    private final LoginSession loginSession;
    /**
     * Creates new form purchaserequistion
     */
    
 
  public purchaserequisition(LoginSession loginSession) {
        this.requisitionService = new RequisitionService();
        this.itemService = new ItemService();
        this.loginSession = loginSession;
        initComponents();
        loadReorderItems();

        // Set the current date in the label
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        jLabel3.setText(dateFormat.format(new Date()));
    }
    
   private void loadReorderItems() {
        List<Item> items = itemService.getAllItems();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing rows
        jComboBox1.removeAllItems(); // Clear dropdown

        // Populate table and dropdown
        for (Item item : items) {
            if (item.getStockLevel() <= item.getReorderLevel()) {
                Object[] rowData = {
                    item.getItemId(),
                    item.getItemCode(),
                    item.getItemName(),
                    item.getSupplierId(),
                    item.getPrice(),
                    item.getReorderLevel(),
                    item.getStockLevel()
                };
                model.addRow(rowData);
                jComboBox1.addItem(item.getItemName() + " (ID: " + item.getItemId() + ")");
            }
        }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "itemId", "itemCode", "itemName", "supplierId", "price", "Reorder Level", "Stock Level"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
        }

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Back to main page");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Quantity");

        jTextField1.setText("jTextField1");

        jLabel2.setText("Date");

        jButton3.setText("Confirm");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("View Requisition");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(226, 226, 226)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(242, 242, 242)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(115, 115, 115))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel2)
                    .addComponent(jButton4)
                    .addComponent(jLabel3))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new stockreorderlevel(loginSession).setVisible(true); // Open the stockreorderlevel window
    this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
           new salesmanager().setVisible(true); // Open the salesmanager window
    this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
          int selectedIndex = jComboBox1.getSelectedIndex();

    if (selectedIndex >= 0) {
        // Highlight the corresponding row in the JTable
        jTable1.setRowSelectionInterval(selectedIndex, selectedIndex);
        jTable1.scrollRectToVisible(jTable1.getCellRect(selectedIndex, 0, true));

        // Optionally display a message with the selected item's details
        String selectedItem = (String) jComboBox1.getSelectedItem();
        JOptionPane.showMessageDialog(this, 
            "Selected Item: " + selectedItem, 
            "Item Details", 
            JOptionPane.INFORMATION_MESSAGE
        );
    }
    }//GEN-LAST:event_jComboBox1ActionPerformed
private boolean isDuplicateRequisition(String itemId) {
    // Load requisitions from the service
    List<Requisition> existingRequisitions = requisitionService.loadData();

    // Compare the item ID and check for Pending status
    for (Requisition req : existingRequisitions) {
        if (req.getItemId().equals(itemId) && (req.getStatus().equalsIgnoreCase("Pending")|| req.getStatus().equalsIgnoreCase("approved"))) {
            return true; // Duplicate with "Pending" status found
        }
    }
    return false; // No duplicate with "Pending" status found
}

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
   int selectedIndex = jComboBox1.getSelectedIndex();

        // Check if an item is selected
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this,
                "No item selected. Please select an item from the dropdown.",
                "Selection Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validate quantity and date input
        String quantityText = jTextField1.getText().trim();
        if (quantityText.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Please fill in both Quantity and Date fields before confirming.",
                "Input Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int quantity = Integer.parseInt(quantityText);
            if (quantity <= 0) {
                JOptionPane.showMessageDialog(this,
                    "Quantity must be greater than 0.",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
   System.out.println("Quantity entered: " + quantity);

            // Retrieve selected item details
            String selectedItem = (String) jComboBox1.getSelectedItem();
            String itemId = selectedItem.substring(selectedItem.indexOf("ID: ") + 4, selectedItem.indexOf(")")).trim();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String supplierId = model.getValueAt(selectedIndex, 3).toString();
           String sm_id= loginSession.getCurrentUserSession();
            // Create and save the requisition
            if (isDuplicateRequisition(itemId)) {
            JOptionPane.showMessageDialog(this,
                "The item is already in requisition process with status Pending.",
                "Duplicate Error",
                JOptionPane.WARNING_MESSAGE);
            return; // Exit if duplicate found
        }
            String requisitionId = requisitionService.generateNextRequisitionId();
        String labelDateText = jLabel3.getText();
Date requiredByDate;
try {
 SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    requiredByDate = dateFormat.parse(labelDateText);  // Parse the date from the label
} catch (ParseException e) {
    JOptionPane.showMessageDialog(this, "Invalid date format in label: " + labelDateText, "Date Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the date parsing fails
}

            Requisition newRequisition = new Requisition(
                requisitionId,
                itemId,
                quantity,
                requiredByDate,
                sm_id, // Sales Manager ID from login
                supplierId, // Supplier ID can be set here if required
                "Pending" // Default status
            );

            requisitionService.addRequisition(newRequisition);

            // Provide feedback to the user
            JOptionPane.showMessageDialog(this,
                "Requisition successfully created and inventory updated.",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);

            // Reload the table and dropdown to reflect changes
            loadReorderItems();

        }  catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "An error occurred: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         new purchaserequisition2(loginSession).setVisible(true); // Open purchaserequisition2 window
    this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(purchaserequisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(purchaserequisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(purchaserequisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(purchaserequisition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
       LoginSession loginSession = new LoginSession();// Example LoginForm instance
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new purchaserequisition(loginSession).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
